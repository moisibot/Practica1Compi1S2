package Gramaticas;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.awt.Color;
import Objetos.*;
parser code {:
    public static ArrayList<Figura> figuras = new ArrayList<>();
    public static ArrayList<Animacion> animaciones = new ArrayList<>();
    public static ArrayList<String> errores = new ArrayList<>();

    public void syntax_error(Symbol s) {
        errores.add("Error sintáctico en línea " + (s.left + 1) + ", columna " + (s.right + 1) + ": " + s.value);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String errorMsg = "Error sintáctico irrecuperable en línea " + (s.left + 1) + ", columna " + (s.right + 1) + ": " + s.value;
        errores.add(errorMsg);
        System.out.println(errorMsg);
    }
    public static ArrayList<String> getErrores() {
        return errores;
    }
  public static Map<String, List<OperadorInfo>> getOperadoresInfo() {
        return AnalizadorLexico.operadoresInfo;
    }
:}

action code {:
    private Color getColor(String colorName) {
        switch (colorName.toLowerCase()) {
            case "azul": return Color.BLUE;
            case "rojo": return Color.RED;
            case "amarillo": return Color.YELLOW;
            case "verde": return Color.GREEN;
            case "morado": return new Color(128, 0, 128);
            case "cafe": return new Color(139, 69, 19);
            case "naranja": return Color.ORANGE;
            case "rosado": return Color.PINK;
            case "celeste": return new Color(135, 206, 235);
            default: return Color.BLACK;
        }
    }
:}

// terminales: parte del alfabeto o lenguaje de nuestro programa 
terminal GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, ANIMAR, OBJETO, ANTERIOR, OBJETO_ANTERIOR;
terminal String COLOR, ANIM_TIPO_LINEAL, ANIM_TIPO_CURVA;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, IGUAL, PUNTO_COMA;
terminal String IDENTIFICADOR;
terminal Integer ENTEROS;
terminal Double DECIMAL, NUMERO;
terminal POSX, POSY, RADIO, ANCHO, ALTO;

// no terminales: 
non terminal ArrayList<Figura> program;
non terminal Figura figure;
non terminal statement, animation;
non terminal Double expression;

// precedencia: orden gera
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left PARENTESIS_ABIERTO, PARENTESIS_CERRADO;

// espero que si sea la gramatica funcional 
start with program;

program ::= statement program
          | statement
          {: RESULT = parser.figuras; :}
          ;


statement ::= figure:f
            {: parser.figuras.add(f); :}
            | animation
            ;

figure ::= GRAFICAR CIRCULO PARENTESIS_ABIERTO IDENTIFICADOR:id COMA expression:x COMA expression:y COMA  expression:r COMA COLOR:c PARENTESIS_CERRADO
         {: RESULT = new Circulo(id, (int)Math.round(x), (int)Math.round(y), (int)Math.round(r), getColor(c)); :}
         | GRAFICAR CUADRADO PARENTESIS_ABIERTO IDENTIFICADOR:id COMA expression:x COMA expression:y COMA expression:l COMA COLOR:c PARENTESIS_CERRADO
         {: RESULT = new Cuadrado(id, (int)Math.round(x), (int)Math.round(y), (int)Math.round(l), getColor(c)); :}
         | GRAFICAR RECTANGULO PARENTESIS_ABIERTO IDENTIFICADOR:id COMA expression:x COMA expression:y COMA expression:w COMA expression:h COMA COLOR:c PARENTESIS_CERRADO
         {: RESULT = new Rectangulo(id, (int)Math.round(x), (int)Math.round(y), (int)Math.round(w), (int)Math.round(h), getColor(c)); :}
         | GRAFICAR LINEA PARENTESIS_ABIERTO IDENTIFICADOR:id COMA expression:x1 COMA expression:y1 COMA expression:x2 COMA expression:y2 COMA COLOR:c PARENTESIS_CERRADO
         {: RESULT = new Linea(id, (int)Math.round(x1), (int)Math.round(y1), (int)Math.round(x2), (int)Math.round(y2), getColor(c)); :}
         | GRAFICAR POLIGONO PARENTESIS_ABIERTO IDENTIFICADOR:id COMA expression:x COMA expression:y COMA expression:s COMA expression:w COMA expression:h COMA COLOR:c PARENTESIS_CERRADO
         {: RESULT = new Poligono(id, (int)Math.round(x), (int)Math.round(y), (int)Math.round(s), (int)Math.round(w), (int)Math.round(h), getColor(c)); :}
         ;

animation ::= ANIMAR OBJETO ANTERIOR PARENTESIS_ABIERTO ANIM_TIPO_LINEAL:t COMA expression:x COMA expression:y COMA expression:o PARENTESIS_CERRADO
            {: RESULT = new Animacion(null, "lineal", (int)Math.round(x), (int)Math.round(y), (int)Math.round(o)); :}
            | ANIMAR OBJETO ANTERIOR PARENTESIS_ABIERTO ANIM_TIPO_CURVA:t COMA expression:x COMA expression:y COMA expression:o PARENTESIS_CERRADO
            {: RESULT = new Animacion(null, "curva", (int)Math.round(x), (int)Math.round(y), (int)Math.round(o)); :}
            ;

expression ::= NUMERO:n
             {: RESULT = n; :}
             | ENTEROS:e {: RESULT = e.doubleValue(); :}
             | DECIMAL:d {: RESULT = d; :}
             | expression:e1 SUMA expression:e2 {: RESULT = e1 + e2; :}
             | expression:e1 RESTA expression:e2 {: RESULT = e1 - e2; :}
             | expression:e1 MULTIPLICACION expression:e2 {: RESULT = e1 * e2; :}
             | expression:e1 DIVISION expression:e2 {: RESULT = e1 / e2; :}
             | PARENTESIS_ABIERTO expression:e PARENTESIS_CERRADO {: RESULT = e; :}
             ;
